package GUI.Component;

import MODEL.KHACHHANG;
import DAO.KhachHang_DAO;
import DAO.DonChinhSua_DAO;
import DAO.DonDat_DAO;
import DAO.PhongKS_DAO;
import GUI.JFRAME.ThanhToan;
import GUI.JFRAME.ThanhToanThem;
import MODEL.DonDat;
import MODEL.DonChinhSua;
import java.awt.CardLayout;
import java.text.ParseException;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import javax.swing.JOptionPane;  
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;
import javax.swing.SwingUtilities;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author bobui
 */
public class quanlydatKhachHang extends javax.swing.JPanel {
    private JPanel parent;
    private CardLayout cardLayout;
    private KHACHHANG kh;
    /**
     * Creates new form quanlydatKhachHang
     */
    public quanlydatKhachHang(JPanel parent, CardLayout cardLayout,String email ) {
        KhachHang_DAO khdao = new KhachHang_DAO();
        this.kh = khdao.select(email);
        //System.out.print(kh.getID());
        //System.out.print(kh.getEMAIL());
        kh.setID(kh.getID());
        
        initComponents();
        loadtable();
        jTable1.setDefaultEditor(Object.class, null);
        
        javax.swing.table.DefaultTableCellRenderer dateRenderer = new javax.swing.table.DefaultTableCellRenderer() {
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");
            @Override
            protected void setValue(Object value) {
                if (value instanceof java.util.Date) {
                    setText(sdf.format((java.util.Date) value));
                } else {
                    setText((value != null) ? value.toString() : "");
                }
            }
        };
        javax.swing.table.JTableHeader header = jTable1.getTableHeader();
        javax.swing.table.DefaultTableCellRenderer headerRenderer = (javax.swing.table.DefaultTableCellRenderer) header.getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        // Gán renderer cho các cột có kiểu ngày
        jTable1.getColumnModel().getColumn(1).setCellRenderer(dateRenderer); // Ngày nhận
        jTable1.getColumnModel().getColumn(2).setCellRenderer(dateRenderer); // Ngày trả
        jTable1.getColumnModel().getColumn(5).setCellRenderer(dateRenderer); // Ngày đặt

        // Ví dụ: thêm dữ liệu mẫu
        // javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) jTable1.getModel();
        // model.setRowCount(0); // Xóa dòng cũ

        // java.util.Date now = new java.util.Date();
        // model.addRow(new Object[] {101, now, now, 3, 450000.0, now});
        // model.addRow(new Object[] {102, now, now, 2, 300000.0, now});
    }
    
    

 
    
    public void loadtable(){
        DonDat_DAO dao = new DonDat_DAO();
        DonChinhSua_DAO dcsDao = new DonChinhSua_DAO();
        Vector<DonDat> list = dao.selectByIDKH(kh.getID());

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // clear old rows

        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd/MM/yyyy");

        for (DonDat d : list) {
            // Lấy đơn chỉnh sửa theo mã đơn
            DonChinhSua dcs = dcsDao.selectDonChinhSuaById(d.getId());
            String trangThaiDuyet = "--";
            String trangThaiThanhToan = "--";
            if (dcs != null) {
                if (!"ĐÃ DUYỆT".equals(dcs.getTrangThaiDuyet())){
                    trangThaiThanhToan = dcs.getTrangThaiThanhToan();
                }
                trangThaiDuyet = dcs.getTrangThaiDuyet();
            }
            model.addRow(new Object[]{
                d.getId(),
                d.getIdP(),
                d.getTenPhong(),
                d.getNgayNhan(),
                d.getNgayTra(),
                d.getSl(),
                d.getGia(),
                d.getNgayDat(),
                trangThaiDuyet,
                trangThaiThanhToan
            });
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        huyBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        findBtn = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(1320, 1025));

        jTable1.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã Đơn", "Mã Phòng", "Tên Phòng", "Ngày Nhận", "Ngày Trả", "Số Lượng", "Giá", "Ngày Đặt", "Trạng Thái Đơn", "Trạng Thái Thanh Toán"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setToolTipText("");
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setRowHeight(30);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(100);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(100);
            jTable1.getColumnModel().getColumn(9).setPreferredWidth(130);
        }

        jScrollPane1.setViewportView(jScrollPane2);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        huyBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        huyBtn.setText("Huỷ");
        huyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                huyBtnActionPerformed(evt);
            }
        });

        editBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        editBtn.setText("Chỉnh sửa");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel1.setText("Tìm theo mã đơn");

        findBtn.setFont(new java.awt.Font("Helvetica Neue", 1, 15)); // NOI18N
        findBtn.setText("Tìm");
        findBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        findBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(huyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 714, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(findBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(huyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 904, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void huyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_huyBtnActionPerformed
        // TODO add your handling code here     
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một đơn cần xoá!");
            return;
        }

        Integer maDon = (Integer) jTable1.getValueAt(selectedRow, 0);

        // Giả sử cột 1 chứa chuỗi định dạng ngày như "2025-06-10"
        Object ngayNhanObj = jTable1.getValueAt(selectedRow, 3);
        java.util.Date ngayNhan = null;

        if (ngayNhanObj instanceof java.util.Date) {
            ngayNhan = (java.util.Date) ngayNhanObj;
        } else if (ngayNhanObj instanceof String) {
            try {
                java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
                ngayNhan = sdf.parse((String) ngayNhanObj);
            } catch (java.text.ParseException e) {
                JOptionPane.showMessageDialog(this, "Lỗi định dạng ngày nhận!");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(this, "Không thể xác định ngày nhận từ dữ liệu bảng!");
            return;
        }

        // So sánh ngày
        java.util.Date now = new java.util.Date();
        long diffMillis = ngayNhan.getTime() - now.getTime();
        long oneDayMillis = 24 * 60 * 60 * 1000;

        if (diffMillis < oneDayMillis) {
            JOptionPane.showMessageDialog(this, "Không thể xoá đơn này vì ngày nhận phòng đã gần kề!");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xoá đơn này?", "Xác nhận xoá", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        // Xoá
        int success = DonDat_DAO.delete(maDon);
        if (success > 0) {
            JOptionPane.showMessageDialog(this, "Xoá đơn thành công!");
            loadtable(); // Tải lại bảng
        } else {
            JOptionPane.showMessageDialog(this, "Xoá thất bại, vui lòng thử lại!");
        }

    }//GEN-LAST:event_huyBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một đơn cần chỉnh sửa!");
            return;
        }
        if (!"--".equals(jTable1.getValueAt(selectedRow, 8).toString())){
            JOptionPane.showMessageDialog(this, "Đơn này bạn đã yêu cầu chỉnh sửa rồi! Không được yêu cầu tiếp.");
            return;
        }

        try {
            Integer maDon = (Integer) jTable1.getValueAt(selectedRow, 0);

            java.sql.Date ngayNhanCuSql = (java.sql.Date) jTable1.getValueAt(selectedRow, 3);
            java.sql.Date ngayTraCuSql = (java.sql.Date) jTable1.getValueAt(selectedRow, 4);
            Integer slCu = (Integer) jTable1.getValueAt(selectedRow, 5);

            // Ép về java.util.Date để sử dụng với SimpleDateFormat
            java.util.Date ngayNhanCu = new java.util.Date(ngayNhanCuSql.getTime());
            java.util.Date ngayTraCu = new java.util.Date(ngayTraCuSql.getTime());

            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            String ngayNhanMoiStr = JOptionPane.showInputDialog(this, "Nhập ngày nhận mới (dd/MM/yyyy):", sdf.format(ngayNhanCu));
            String ngayTraMoiStr = JOptionPane.showInputDialog(this, "Nhập ngày trả mới (dd/MM/yyyy):", sdf.format(ngayTraCu));
            String slMoiStr = JOptionPane.showInputDialog(this, "Nhập số lượng mới:", slCu);

            if (ngayNhanMoiStr == null || ngayTraMoiStr == null || slMoiStr == null) return;

            java.util.Date ngayNhanMoi = sdf.parse(ngayNhanMoiStr);
            java.util.Date ngayTraMoi = sdf.parse(ngayTraMoiStr);
            int slMoi = Integer.parseInt(slMoiStr);

            if (ngayNhanMoi.after(ngayTraMoi)) {
                JOptionPane.showMessageDialog(this, "Ngày trả phải sau ngày nhận!");
                return;
            }
            if (slMoi <= 0) {
                JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
                return;
            }

            Date today = new Date();
            if (!ngayNhanMoi.after(today)) {
                JOptionPane.showMessageDialog(this, "Ngày nhận mới phải sau ngày hiện tại!");
                return;
            }

            DonChinhSua model = new DonChinhSua();
            model.setDatPhongId(maDon);
            model.setNgayNhanMoi(ngayNhanMoi);
            model.setNgayTraMoi(ngayTraMoi);
            model.setSlMoi(slMoi);
            model.setTrangThaiDuyet("CHỜ DUYỆT");
            model.setTrangThaiThanhToan("CHƯA THANH TOÁN");

            DonChinhSua_DAO dao = new DonChinhSua_DAO();
            dao.insertDonChinhSua(model);

            loadtable(); // gọi lại bảng sau khi thêm
            JOptionPane.showMessageDialog(this, "Gửi đơn chỉnh sửa thành công! Đơn đang chờ duyệt.");
        } catch (ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ!");
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra!");
        }

    }//GEN-LAST:event_editBtnActionPerformed

    private void findBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findBtnActionPerformed
        // TODO add your handling code here:
        String text = idTextField.getText().trim();
        if (text.isEmpty()) {
            loadtable(); // Nếu không nhập gì, load lại toàn bộ
            return;
        }
        try {
            int maDon = Integer.parseInt(text);
            DonDat don = new DonDat_DAO().select(maDon);
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0); 
            if (don != null && don.getIdKH().equals(kh.getID())) {
                model.addRow(new Object[]{
                    don.getId(),
                    don.getNgayNhan(),
                    don.getNgayTra(),
                    don.getSl(),
                    don.getGia(),
                    don.getNgayDat()
                });
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy đơn phù hợp!");
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Mã đơn phải là số!");
        }
        
    }//GEN-LAST:event_findBtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(evt)) {
            int viewRow = jTable1.getSelectedRow();
            if (viewRow != -1) {
                // Chuyển sang model index
                int modelRow = jTable1.convertRowIndexToModel(viewRow);

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                String trangthaiDon=model.getValueAt(modelRow, 8).toString();
                String trangthaiTT=model.getValueAt(modelRow, 9).toString();
                System.out.println(trangthaiDon+"   "+trangthaiTT);
                if ("ĐÃ DUYỆT".equals(trangthaiDon) && "CHƯA THANH TOÁN".equals(trangthaiTT)){
                    
                    Integer madonDP = Integer.valueOf(model.getValueAt(modelRow, 0).toString());
                    Integer maPhong = Integer.valueOf(model.getValueAt(modelRow, 1).toString());
                    String tenPhong = model.getValueAt(modelRow, 2).toString();
                    long sotiencu = Long.valueOf(model.getValueAt(modelRow, 6).toString());

                    DonDat donDat = new DonDat();
                    donDat.setIdKH(kh.getID());
                    donDat.setIdP(maPhong);

                    LocalDateTime localDateTime = LocalDateTime.now();
                    ZoneId zone = ZoneId.systemDefault();
                    Date date = Date.from(localDateTime.atZone(zone).toInstant());
                    donDat.setNgayDat(date);

                    donDat.setTenPhong(tenPhong);
                    donDat.setTenKH(kh.getHOTEN());
                    PhongKS_DAO.getKS(donDat.getIdP(),donDat);

                    DonChinhSua dcs = new DonChinhSua_DAO().selectDonChinhSuaById(madonDP);

                    DonChinhSua_DAO.UpdateTT_ThanhToan(dcs.getId(), 1);
                    DonDat_DAO.UpdateDP(dcs);
                    System.out.println("111111111111111111111111111111");
                    ThanhToanThem TT = new ThanhToanThem(dcs, donDat, sotiencu);
                    TT.pack();                        
                    TT.setLocationRelativeTo(null);
                    TT.setVisible(true);
                }
            }
            loadtable();
        }
    }//GEN-LAST:event_jTable1MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton editBtn;
    private javax.swing.JButton findBtn;
    private javax.swing.JButton huyBtn;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
