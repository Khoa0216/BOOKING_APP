package GUI.Component;


/**
 *
 * @author Admin
 */


import java.awt.*;
import javax.swing.*;
import GUI.Component.CustomScrollBar;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import database.jdbcHelper;
import utils.message;
import utils.csvExporter;
import DAO.DonDat_DAO;
import java.util.ArrayList;
import java.util.Arrays;
import MODEL.DonDat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableRowSorter;
import java.time.*;



public class tableDonDat extends javax.swing.JPanel {

    /**
     * Creates new form contentDonDat
     */
    private final String user = "booking_app";
    private final String pass = "12345678";
    private jdbcHelper jdbc = new jdbcHelper(user, pass);
    private int selectedRow = -1;
    private Integer selectecDonID = -1;
    
    private final ImageIcon icDelete = new ImageIcon(getClass().getResource("/image/delete.png"));
    private final ImageIcon icEdit   = new ImageIcon(getClass().getResource("/image/edit.png"));
    private final ImageIcon icSave    = new ImageIcon(getClass().getResource("/image/save_as.png"));
    private final ImageIcon icSearch = new ImageIcon(getClass().getResource("/image/search.png"));
    
    private final String header[] = {"Mã đơn", "Mã khách hàng", "Tên khách hàng", "Mã doanh nghiệp",
        "Tên doang nghiệp", "Giá", "Ngày đặt"}; 
    private DefaultTableModel model;
    
        
    public tableDonDat() {
        initComponents();
        loadTable();
        setIcon();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        myTable.setDefaultRenderer(Object.class, centerRenderer);
    }
    
    public void setIcon(){
        btnSearch.setIcon(icSearch);
        btnSua.setIcon(icEdit);
        btnXoa.setIcon(icDelete);
        btnXuatExcel.setIcon(icSave);
    }
    
    public void loadTable(){

        scrollBar.getVerticalScrollBar().setUI(new CustomScrollBar());
        scrollBar.getHorizontalScrollBar().setUI(new CustomScrollBar());
        this.model = new DefaultTableModel(header, 0){
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                switch (columnIndex) {
                    case 0: return Integer.class;   
                    case 1: return Integer.class;    
                    case 2: return String.class;    
                    case 3: return Integer.class;   
                    case 4: return String.class;
                    case 5: return Long.class;
                    default: return Object.class;
                }
            }
        };;
        Vector<DonDat> donDatList = DonDat_DAO.selectAll();
        for (DonDat d : donDatList){
            Vector<Object> row = new Vector<>(Arrays.asList(
                    d.getId(),
                    d.getIdKH(),
                    d.getTenKH(),
                    d.getIdKS(),
                    d.getTenKS(),
                    d.getGia(),
                    d.getNgayDat()
            ));
            model.addRow(row);
        }
        myTable.setRowSorter(null);     // Xóa RowSorter đang giữ trạng thái cũ
        myTable.setModel(model);        // Gán lại model mới
        myTable.revalidate();           // Cập nhật lại
        myTable.repaint();
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollBar = new javax.swing.JScrollPane();
        myTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnXuatExcel = new javax.swing.JButton();
        txtFieldSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        CBSort = new javax.swing.JComboBox<>();

        setPreferredSize(new java.awt.Dimension(520, 520));

        myTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã Đơn", "Mã Khách hàng", "Tên Khách hàng", "Mã Doanh Nghiệp", "Tên Doanh Nghiệp", "Giá", "Ngày Đặt"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        myTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                myTableMouseClicked(evt);
            }
        });
        scrollBar.setViewportView(myTable);

        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnXuatExcel.setText("Xuất excel");
        btnXuatExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatExcelActionPerformed(evt);
            }
        });

        txtFieldSearch.setText("...");
        txtFieldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Tìm kiếm");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        CBSort.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Theo mã đơn", "Theo giá giảm", "Theo ngày đặt gần nhất" }));
        CBSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBSortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnXoa)
                .addGap(18, 18, 18)
                .addComponent(btnSua)
                .addGap(18, 18, 18)
                .addComponent(btnXuatExcel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 229, Short.MAX_VALUE)
                .addComponent(txtFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addGap(18, 18, 18)
                .addComponent(CBSort, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnXoa)
                    .addComponent(btnSua)
                    .addComponent(btnXuatExcel)
                    .addComponent(txtFieldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(CBSort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollBar)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollBar)
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
        if (this.selectedRow != -1){
            Integer rowModel = myTable.convertRowIndexToModel(selectedRow);
            Integer ID = (Integer) myTable.getModel().getValueAt(rowModel, 0);
            DonDat_DAO.delete(ID);
            model.removeRow(rowModel);
        }       
    }//GEN-LAST:event_btnXoaActionPerformed

    private void txtFieldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFieldSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFieldSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void CBSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBSortActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)myTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        myTable.setRowSorter(sorter);
        
        final int COL_MADON = 0;
        final int COL_GIA = 5;
        final int COL_NGAYDAT = 6;
        
        String selection = (String) CBSort.getSelectedItem();
        
        ArrayList<RowSorter.SortKey> keys = new ArrayList<>();
        switch (CBSort.getSelectedIndex()) {
            case 0: keys.add(new RowSorter.SortKey(COL_MADON, SortOrder.ASCENDING));  break;
            case 1: keys.add(new RowSorter.SortKey(COL_GIA,     SortOrder.DESCENDING)); break;
            case 2: keys.add(new RowSorter.SortKey(COL_NGAYDAT,    SortOrder.DESCENDING)); break;
        }
        sorter.setSortKeys(keys);
    }//GEN-LAST:event_CBSortActionPerformed

    private void myTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_myTableMouseClicked
        // TODO add your handling code here:
        this.selectedRow = myTable.getSelectedRow();
    }//GEN-LAST:event_myTableMouseClicked

    private void btnXuatExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatExcelActionPerformed
        // TODO add your handling code here:
        LocalDate date = LocalDate.now();
        String pathDir = "./CSV/DonDat";
        String name = "donDat_" + String.valueOf(date) + ".csv";
             
        try {
            csvExporter.exportToCSV(myTable, pathDir, name);
            message.alert(null, "Xuất Excel thành công!");
        } catch (Exception ex) {
            Logger.getLogger(tableDonDat.class.getName()).log(Level.SEVERE, null, ex);
            message.alert(null, "Lỗi: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnXuatExcelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBSort;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXuatExcel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTable myTable;
    private javax.swing.JScrollPane scrollBar;
    private javax.swing.JTextField txtFieldSearch;
    // End of variables declaration//GEN-END:variables
}
